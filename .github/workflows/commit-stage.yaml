name: Commit Stage
on: push

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ds0708/config-service
  VERSION: latest

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: temurin
          java-version: 17
          cache: gradle
      - name: Code vulnerability scanning
        uses: anchore/scan-action@v3
        id: scan
        with:
          path: "${{ github.workspace }}"
          fail-build: false
          severity-cutoff: high
          acs-report-enable: true
      - name: Upload vulnerability report
        uses: github/codeql-action/upload-sarif@v3
        if: success() || failure()
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}
      - name: Build, unit tests and integration tests
        run: |
          chmod +x gradlew 
          ./gradlew build
      - name: Setup tools # 쿠버네티스 매니페스트 파일 검증을 위한 사전작업
        uses: alexellis/setup-arkade@v3
      - name: Install tools
        uses: alexellis/arkade-get@master # Arkade를 사용하여 지정된 도구를 설치
        with:
          kubeconform: latest # kubeconform은 k8s 매니페스트 유효성을 검사하는 도구
      - name: Validate Kubernetes manifests
        run: |
          kubeconform --strict k8s
  package:
    name: Package and Publish
    if: ${{ github.ref == 'refs/heads/main' }}
    needs: [ build ]
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write
      security-events: write
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: gradle
      - name: Build container image
        run: |
          chmod +x gradlew
          ./gradlew bootBuildImage \
            --imageName ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
      - name: OCI image vulnerability scanning
        uses: anchore/scan-action@v3    # 취약성 검사를 위해 그라이프를 사용해 릴리스 후보 이미지를 스캔
        id: scan
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }} # 스캔할 이미지는 릴리스 후보
          fail-build: false # 이미지에서 취약점이 발견되도 빌드를 실패로 만들지 않음
          severity-cutoff: high
      - name: Upload vulnerability report
        uses: github/codeql-action/upload-sarif@v3
        if: success() || failure()
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}
      - name: Log into container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }} # 저장소 정보는 환경 변수로 정의
          username: ${{ github.actor }} # 깃허브 액션이 제공하는 현재 사용자의 깃허브 유저명
          password: ${{ secrets.GITHUB_TOKEN }} # 저장소에 인증하기 위해 필요한 토큰으로 깃허브 액션이 제공
      - name: Publish container image # 릴리스 후보를 저장소에 push
        run: docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}